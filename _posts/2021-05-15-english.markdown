---
layout: post
title:  "Book review: Software Engineering At Google (WIP)"
date:  2021-05-15 18:49:10 +0900 
categories: jekyll update
comments: true
tag:
  - book
  - software
---

I can get the free PDF version https://abseil.io/resources/swe-book

# Ch1. What Is Software Engineering?

Three difference between programming and software engineering are time, scale, and the trade-off at play. As software engineers, we are asked to make moer complex decisions with higher-stake outcomes, often based on imprecise estimates of time and growth.

Programming tasks(development), software engineering tasks(development, modification, maintenance). The addition of time adds an important new dimension to programming.

## Time and Change

The life span of software is not one day. it's not programming assignment or startup development. A transition happens: A program must begin to react to chaning externalities.

## Hyrum's Law

If you are maintaining a project that is used by other engineers, the most important
lesson about “it works” versus “it is maintainable”

# Ch2. Culture

# Ch5. How to Lead a Team

## The Tech Lead

The tech lead (TL) of a team—who will often report to the manager of that team—is
responsible for (surprise!) the technical aspects of the product, including technology
decisions and choices, architecture, priorities, velocity, and general project manage‐
ment (although on larger teams they might have program managers helping out with
    this). The TL will usually work hand in hand with the engineering manager to ensure
that the team is adequately staffed for their product and that engineers are set to work
on tasks that best match their skill sets and skill levels. Most TLs are also individual
contributors, which often forces them to choose between doing something quickly
themselves or delegating it to a team member to do (sometimes) more slowly. The
latter is most often the correct decision for the TL as they grow the size and capability
of their team.

## Moving from indivisual contributor role to a Leadership Role

You might find yourself sucked into helping your team resolve conficts, make decisions, and coordinate people.
Maybe you never intended to beomce a 'leader', but somehow it happended anyway.

## Antipattern: Hire Pushovers

You should strive to hire people who are smarter than you.

## Antipattern: Ignore low performers

The benefit of dealing with a low performer as quickly as possible is that you can put
yourself in the position of helping them up or out.

## Antipattern: Treat your team like children

If I treat team members like kinds - people tend to act the way I treat them.


